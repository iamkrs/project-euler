// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

let fibonacciSequence = () => {
  let sequence = [1, 2];
  let fibonacciNext = (n) => {
    let index = sequence.indexOf(n);
    let a = sequence[index], b = sequence[index-1];
    isNaN(a) ? a = 0 : a = a, isNaN(b) ? b = 0 : b = b;
    return a + b;
  }
  let lastNum = () => sequence[sequence.length-1];
  while (fibonacciNext(lastNum()) < 4000000)
    sequence.push(fibonacciNext(lastNum()));
  return sequence;
}

let sumEvenNumbers = (sequence) => sequence
       .filter((n) => n % 2 === 0)
       .reduce((a, b) => a + b, 0);

console.log(sumEvenNumbers(fibonacciSequence()));
